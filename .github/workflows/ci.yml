name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-ingress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/ingress-bot/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/ingress-bot
          npm ci
      
      - name: Run tests
        run: |
          cd services/ingress-bot
          npm test
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  test-retrieval:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd services/retrieval-service
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx
      
      - name: Run tests
        run: |
          cd services/retrieval-service
          python -m pytest tests/ -v

  test-ingest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd services/ingest-worker
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          cd services/ingest-worker
          python -c "import worker; print('Import successful')"

  build-images:
    runs-on: ubuntu-latest
    needs: [test-ingress, test-retrieval, test-ingest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push images
        run: |
          docker-compose build
          echo "Images built successfully"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install ESLint
        run: |
          cd services/ingress-bot
          npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
      
      - name: Run ESLint
        run: |
          cd services/ingress-bot
          npx eslint src/ --ext .ts
      
      - name: Install flake8
        run: pip install flake8
      
      - name: Run flake8
        run: |
          flake8 services/retrieval-service/app/
          flake8 services/ingest-worker/ 